Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
 

Follow up: Could you solve the problem in linear time and in O(1) space?

***************************************************************************CODE USING MAPS************************************************************************

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        //  MAP IS USED TO STORE THE FREQUENCY OF ALL THE ELEMENT
        
        unordered_map<int,int> mp;
        
        for(auto &i:nums){
            mp[i]++;
        }
        
        vector<int> ans;
        
        int count=nums.size()/3; 
        
         //IF A NUMBER HAVE THE FREQUENCY GREATER THAN N/3 STORE THAT NUMBER INTO THE VECTOR ANS
        
        for(auto &i:mp){
            if(i.second>count) ans.push_back(i.first);
        }
        
        return ans;
    }
};
