Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.

 

Example 1:

Input: nums = [10,5,2,6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are:
[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.
Example 2:

Input: nums = [1,2,3], k = 0
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
1 <= nums[i] <= 1000
0 <= k <= 106

***********************************************************O(N) SLIDING WINDOW**********************************************************************


class Solution {
public:
    
    //INCLUDING THE END INDEX ELEMENT INTO THE WINDOW IF PRODUCT IS LESS THAN K INCREASE THE ANSWER
    
    //IF PRODUCT IS GREATER THAN K EXCLUDE THE START INDEX ELEMENT AND DIVIDE PRODUCT BY K
    
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
         
          if(k<=0) return 0;
         
        
            int ans=0;
            int end=0;
            int start=0;
      
        
          int product=nums[0];
        
        while(start<nums.size()&&end<nums.size()){

            //IF PRODUCT IS LESS THAN K
            if(product<k){
               
                ans+=end-start+1;
                
                  end++;
                
                if(end<nums.size())
                     product*=nums[end];
            } 
            
            //PRODUCT GREATER THAN K
            //EXCLUDE START ELEMENT AND DECREASE PRODUCT
            
            else{
                product/=nums[start++];
              
            }
      
        }
        
        return ans;
        
    }
};
