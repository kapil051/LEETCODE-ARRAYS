A swap is defined as taking two distinct positions in an array and swapping the values in them.

A circular array is defined as an array where we consider the first element and the last element to be adjacent.

Given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.

 

Example 1:

Input: nums = [0,1,0,1,1,0,0]
Output: 1
Explanation: Here are a few of the ways to group all the 1's together:
[0,0,1,1,1,0,0] using 1 swap.
[0,1,1,1,0,0,0] using 1 swap.
[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).
There is no way to group all 1's together with 0 swaps.
Thus, the minimum number of swaps required is 1.
Example 2:

Input: nums = [0,1,1,1,0,0,1,1,0]
Output: 2
Explanation: Here are a few of the ways to group all the 1's together:
[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).
[1,1,1,1,1,0,0,0,0] using 2 swaps.
There is no way to group all 1's together with 0 or 1 swaps.
Thus, the minimum number of swaps required is 2.
Example 3:

Input: nums = [1,1,0,0,1]
Output: 0
Explanation: All the 1's are already grouped together due to the circular property of the array.
Thus, the minimum number of swaps required is 0.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.

//******************************************************APPROACH SLIDING WINDOW(O(N))*****************************************************

class Solution {
public:
    //APPROACH
    
    //STEP 1: FIRST I WILL COUNT THE TOTAL ONES AND TOTAL ZEROS IN THE VECTOR
    //STEP 2: I WILL MAKE A WINDOW OF SIZE AS TOTAL ONES IN THE ARRAY
    //STEP 3: COUNT TOTAL ONE IN THE WINDOW
    //STEP 4: RUN A LOOP OVER THE WINDOW
    //STEP 5: TOTAL SWAPS ARE NUMBER OF ZEORS IN THE WINDOW(TOTAL ONES-WINDOW ONES)
    //STEP 6: FOR AVOIDING CYCLIC PROPERTY APPEND THE SAME VECTOR AT LAST
    
    int minSwaps(vector<int>& nums){
        
        if(nums.size()==1) return 0;
        
        int ones=0,zeros=0;
        
        for(auto &i:nums){
             
            if(i==1) ones++;
            
            else zeros++;
        }
        
        if(zeros==nums.size()) return 0;
        
        if(ones==nums.size()) return 0;
        
        nums.insert(nums.end(), nums.begin(), nums.end());

           int ans=INT_MAX;
        
        int start=0;
        int end=ones-1;
        
                int one=0;
        
        for(int i=start;i<=end;i++) if(nums[i]==1) one++;
     
        
        while(end<nums.size()){
            
            ans=min(ans,ones-one);
            
            if(nums[start]==1) one--;
             
             start++;
             end++;
            
            if(end<nums.size()&&nums[end]==1) one++;
        }
        
       return ans; 
    }
};
