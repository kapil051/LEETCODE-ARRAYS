Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104

//********************************************************HASHMAPS APPROACH*******************************************************************

//T.C=O(N)
//S.C=O(N)

class Solution {
public:
    
      //  MP[0]=1
    
   //  1.  2 3 5  4  5   3   4
   //    S=2 5 10 14 19  22  26     K=7
   // REM= 2 5 3  0   5   1  5      ANS=4
   // FREQ=1 1 1  2   2   1  3 
    
    //EG.2 
    
      //     2   -6    3   1   2   8   2    1
      //  0  2   -4=3  -1  0   2  10   12  13   K=7   ANS=4
      //  1  2    1     1  2   2  2    1   2  
    
    
    int subarraysDivByK(vector<int>& nums, int k) {
        
          int sum=0;
         
          int count=0;
        
        unordered_map<int,int> mp;
        
              mp[0]=1;
        
        for(int i=0;i<nums.size();i++){
            
               sum+=nums[i];
            
            //IF REMENDER IS LESS THAN 0 THEN ADD K TO MAKE IT POSITIVE
            
               int rem=sum%k;
            
              if(rem<0) rem+=k;
            
              if(mp[rem]) count+=mp[rem];
            
            
            
            mp[rem]++;
        }
        
        return count;
    }
};
