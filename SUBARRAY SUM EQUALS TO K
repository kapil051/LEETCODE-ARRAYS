Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107

*******************************************************USING BASIC APPROACH**************************************************************
//USING NESTED FOR LOOPS

class Solution {
public:
    
    int sum(vector<int> &nums,int &start,int &end){
        
          int sum=0;
 
         for(int i=start;i<=end;i++){
             sum+=nums[i];
         }
        
        return sum;
    }
    
    
    int subarraySum(vector<int>& nums, int k) {
        
              int count=0;
     
        for(int i=0;i<nums.size();i++){
            
             for(int j=i;j<nums.size();j++){
                 
              cout<<"i:"<<i<<" "<<"j:"<<j<<" ";   
                 
               if(k==sum(nums,i,j)) count++;
                 
                 cout<<"sum:"<<sum(nums,i,j)<<endl;
                 
             }
            
        }
        
        return count;
    }
};


