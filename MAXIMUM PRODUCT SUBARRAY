Given an integer array nums, find a subarray that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

***************************************************APPROACH 1(O(N) CHECK AND UPDATE FROM BOTH THE END)****************************************************

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
    //STEP 1:UPDATE MAXPRODUCT WHEN YOU FIND PRODUCT GREATER THAN THE MAXPRODUCT
    //STEP 2:IF THE CURRENT PRODUCT IS 0 (ONLY WHEN THE CURRENT ELEMENT IS 0) UPDATE THE PRODUCT TO 1
        
        
        int product=1;
        int maxProduct=INT_MIN;
        
        for(int i=0;i<nums.size();i++){
            
            product*=nums[i];
            
            maxProduct=max(maxProduct,product);
            
             if(product==0) product=1;
        }
        
                product=1;
        
         for(int i=nums.size()-1;i>=0;i--){
            
              product*=nums[i];
            
            maxProduct=max(maxProduct,product);
            
             if(product==0) product=1;
        }
        
       return maxProduct; 
    }
};

*****************************************************************APPROACH 2(MAX TILL NOW//MIN TILL NOW O(N))**********************************************

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
        //IN THIS QUESTION YOU NEED TO TAKE ACTION ON MAX TILL NOW AND MIN TILL NOW AND UPDATE BOTH OF THEM ACCORDINGLY
        
        //STEP 1: IF MAXTILLNOW AND MINTILLNOW IS BOT ZERO UPDATE BOTH OF THEM BY CURRENT ELEMENT AND UPDATE THE ANSWER
        
        //ELSE UPADTE YOUR MAX IT WILL BE MAXIMUM OF THE CURRENT ELEMENT AND NUMS[I]*MAXTILLNOW
        //NUMS[I]*MINTILLNOW
        //UPDATE MINTILLNOW BY MINIMUM OF NUMS[I] AND NUMS[I]*MAXTILLNOW AND NUMS[I]*MINTILLNOW
        
        
        
          int maxTillNow=0;
          int minTillNow=0;
        
             int ans=INT_MIN;
        
        for(int i=0;i<nums.size();i++){
            
            if(maxTillNow==0&&minTillNow==0) {
                maxTillNow=nums[i];
                minTillNow=nums[i];
                
                ans=max(ans,nums[i]);
                
                continue;
            }
            
             cout<<"max:"<<maxTillNow<<"min:"<<minTillNow<<"ans:"<<ans<<endl;
            
             ans=max(ans,max(nums[i],max(nums[i]*maxTillNow,nums[i]*minTillNow)));
            
            int newMaxTillNow=max(nums[i],max(nums[i]*maxTillNow,nums[i]*minTillNow));
            minTillNow=min(nums[i],min(nums[i]*maxTillNow,nums[i]*minTillNow));
           
               maxTillNow=newMaxTillNow;
            
        }
        
       return ans; 
    }
};
